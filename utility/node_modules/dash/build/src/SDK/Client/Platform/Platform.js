"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = void 0;
// @ts-ignore
var dpp_1 = __importDefault(require("@dashevo/dpp"));
var broadcast_1 = __importDefault(require("./methods/documents/broadcast"));
var create_1 = __importDefault(require("./methods/documents/create"));
var get_1 = __importDefault(require("./methods/documents/get"));
var broadcast_2 = __importDefault(require("./methods/contracts/broadcast"));
var create_2 = __importDefault(require("./methods/contracts/create"));
var get_2 = __importDefault(require("./methods/contracts/get"));
var get_3 = __importDefault(require("./methods/identities/get"));
var register_1 = __importDefault(require("./methods/identities/register"));
var topUp_1 = __importDefault(require("./methods/identities/topUp"));
var register_2 = __importDefault(require("./methods/names/register"));
var resolve_1 = __importDefault(require("./methods/names/resolve"));
var resolveByRecord_1 = __importDefault(require("./methods/names/resolveByRecord"));
var search_1 = __importDefault(require("./methods/names/search"));
var broadcastStateTransition_1 = __importDefault(require("./broadcastStateTransition"));
/**
 * Class for Dash Platform
 *
 * @param documents - documents
 * @param identities - identites
 * @param names - names
 * @param contracts - contracts
 */
var Platform = /** @class */ (function () {
    /**
     * Construct some instance of Platform
     *
     * @param {PlatformOpts} options - options for Platform
     */
    function Platform(options) {
        this.documents = {
            broadcast: broadcast_1.default.bind(this),
            create: create_1.default.bind(this),
            get: get_1.default.bind(this),
        };
        this.contracts = {
            broadcast: broadcast_2.default.bind(this),
            create: create_2.default.bind(this),
            get: get_2.default.bind(this),
        };
        this.names = {
            register: register_2.default.bind(this),
            resolve: resolve_1.default.bind(this),
            resolveByRecord: resolveByRecord_1.default.bind(this),
            search: search_1.default.bind(this),
        };
        this.identities = {
            register: register_1.default.bind(this),
            get: get_3.default.bind(this),
            topUp: topUp_1.default.bind(this),
        };
        var stateRepository = {
            fetchIdentity: get_3.default.bind(this),
            fetchDataContract: get_2.default.bind(this),
            // This check still exists on the client side, however there's no need to
            // perform the check as in this client we always use a new transaction
            // register/top up identity
            checkAssetLockTransactionOutPointExists: function () { return false; },
        };
        this.dpp = new dpp_1.default(__assign({ identities: {
                skipAssetLockProofSignatureVerification: true,
            }, stateRepository: stateRepository }, options));
        this.passFakeAssetLockProofForTests = Boolean(options.passFakeAssetLockProofForTests);
        this.client = options.client;
    }
    /**
     * Broadcasts state transition
     * @param {Object} stateTransition
     */
    Platform.prototype.broadcastStateTransition = function (stateTransition) {
        return broadcastStateTransition_1.default(this, stateTransition);
    };
    ;
    return Platform;
}());
exports.Platform = Platform;
//# sourceMappingURL=Platform.js.map