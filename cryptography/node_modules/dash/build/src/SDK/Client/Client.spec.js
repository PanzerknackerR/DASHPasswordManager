"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("./index");
require("mocha");
var dashcore_lib_1 = require("@dashevo/dashcore-lib");
var createFakeIntantLock_1 = require("../../utils/createFakeIntantLock");
var Identity_1 = __importDefault(require("@dashevo/dpp/lib/identity/Identity"));
var stateTransitionTypes_1 = __importDefault(require("@dashevo/dpp/lib/stateTransition/stateTransitionTypes"));
var createDapiClientMock_1 = require("../../test/mocks/createDapiClientMock");
// @ts-ignore
var TxStreamMock = require('@dashevo/wallet-lib/src/test/mocks/TxStreamMock');
// @ts-ignore
var TransportMock = require('@dashevo/wallet-lib/src/test/mocks/TransportMock');
// @ts-ignore
var TxStreamDataResponseMock = require('@dashevo/wallet-lib/src/test/mocks/TxStreamDataResponseMock');
var mnemonic = 'agree country attract master mimic ball load beauty join gentle turtle hover';
describe('Dash - Client', function suite() {
    var _this = this;
    this.timeout(30000);
    var txStreamMock;
    var transportMock;
    var testHDKey;
    var clientWithMockTransport;
    var account;
    var walletTransaction;
    var dapiClientMock;
    beforeEach(function beforeEach() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        txStreamMock = new TxStreamMock();
                        transportMock = new TransportMock(this.sinon, txStreamMock);
                        testHDKey = "xprv9s21ZrQH143K4PgfRZPuYjYUWRZkGfEPuWTEUESMoEZLC274ntC4G49qxgZJEPgmujsmY52eVggtwZgJPrWTMXmbYgqDVySWg46XzbGXrSZ";
                        transportMock.getIdentityIdsByPublicKeyHash.returns([null]);
                        dapiClientMock = createDapiClientMock_1.createDapiClientMock(this.sinon);
                        clientWithMockTransport = new index_1.Client({
                            wallet: {
                                HDPrivateKey: testHDKey,
                            }
                        });
                        // Mock wallet transport for transactions
                        clientWithMockTransport.wallet.transport = transportMock;
                        // Mock dapi client for platform endpoints
                        clientWithMockTransport.dapiClient = dapiClientMock;
                        return [4 /*yield*/, Promise.all([
                                clientWithMockTransport.wallet.getAccount(),
                                new Promise(function (resolve) {
                                    setTimeout(function () {
                                        txStreamMock.emit(TxStreamMock.EVENTS.end);
                                        resolve();
                                    }, 100);
                                })
                            ])];
                    case 1:
                        // setInterval(() => {
                        //   txStreamMock.emit(TxStreamMock.EVENTS.end);
                        // }, 100);
                        account = (_a.sent())[0];
                        // account = await clientWithMockTransport.wallet.getAccount();
                        // add fake tx to the wallet so it will be able to create transactions
                        walletTransaction = new dashcore_lib_1.Transaction(undefined)
                            .from([{
                                amount: 150000,
                                script: '76a914f9996443a7d5e2694560f8715e5e8fe602133c6088ac',
                                outputIndex: 0,
                                txid: new dashcore_lib_1.Transaction(undefined).hash,
                            }])
                            .to(account.getAddress(10).address, 100000);
                        return [4 /*yield*/, account.importTransactions([walletTransaction.serialize(true)])];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    });
    it('should provide expected class', function () {
        chai_1.expect(index_1.Client.name).to.be.equal('Client');
        chai_1.expect(index_1.Client.constructor.name).to.be.equal('Function');
    });
    it('should be instantiable', function () {
        var client = new index_1.Client();
        chai_1.expect(client).to.exist;
        chai_1.expect(client.network).to.be.equal('testnet');
        chai_1.expect(client.getDAPIClient().constructor.name).to.be.equal('DAPIClient');
    });
    it('should not initiate wallet lib without mnemonic', function () {
        var client = new index_1.Client();
        chai_1.expect(client.wallet).to.be.equal(undefined);
    });
    it('should initiate wallet-lib with a mnemonic', function () { return __awaiter(_this, void 0, void 0, function () {
        var client, account;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    client = new index_1.Client({
                        wallet: {
                            mnemonic: mnemonic,
                            offlineMode: true,
                        }
                    });
                    chai_1.expect(client.wallet).to.exist;
                    chai_1.expect(client.wallet.offlineMode).to.be.equal(true);
                    return [4 /*yield*/, ((_a = client.wallet) === null || _a === void 0 ? void 0 : _a.storage.stopWorker())];
                case 1:
                    _c.sent();
                    return [4 /*yield*/, ((_b = client.wallet) === null || _b === void 0 ? void 0 : _b.disconnect())];
                case 2:
                    _c.sent();
                    return [4 /*yield*/, client.getWalletAccount()];
                case 3:
                    account = _c.sent();
                    return [4 /*yield*/, account.disconnect()];
                case 4:
                    _c.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw an error if client and wallet have different networks', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                new index_1.Client({
                    network: 'testnet',
                    wallet: {
                        mnemonic: mnemonic,
                        offlineMode: true,
                        network: 'evonet',
                    },
                });
                chai_1.expect.fail('should throw an error');
            }
            catch (e) {
                chai_1.expect(e.message).to.equal('Wallet and Client networks are different');
            }
            return [2 /*return*/];
        });
    }); });
    describe('#platform.identities.register', function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            it('should register an identity', function () { return __awaiter(_this, void 0, void 0, function () {
                var isLock, transaction, interceptedIdentityStateTransition, identityFromDAPI, identity, interceptedAssetLock, importedIdentityIds;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            transportMock.sendTransaction.callsFake(function (txString) {
                                transaction = new dashcore_lib_1.Transaction(txString);
                                isLock = createFakeIntantLock_1.createFakeInstantLock(transaction.hash);
                                txStreamMock.emit(TxStreamMock.EVENTS.data, new TxStreamDataResponseMock({ instantSendLockMessages: [isLock.toBuffer()] }));
                            });
                            dapiClientMock.platform.broadcastStateTransition.callsFake(function (stBuffer) { return __awaiter(_this, void 0, void 0, function () {
                                var identityFromDAPI_1;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, clientWithMockTransport.platform.dpp.stateTransition.createFromBuffer(stBuffer)];
                                        case 1:
                                            interceptedIdentityStateTransition = _a.sent();
                                            if (interceptedIdentityStateTransition.getType() === stateTransitionTypes_1.default.IDENTITY_CREATE) {
                                                identityFromDAPI_1 = new Identity_1.default({
                                                    protocolVersion: interceptedIdentityStateTransition.getProtocolVersion(),
                                                    id: interceptedIdentityStateTransition.getIdentityId().toBuffer(),
                                                    publicKeys: interceptedIdentityStateTransition.getPublicKeys().map(function (key) { return key.toObject(); }),
                                                    balance: interceptedIdentityStateTransition.getAssetLock().getOutput().satoshis,
                                                    revision: 0,
                                                });
                                                dapiClientMock.platform.getIdentity.withArgs(identityFromDAPI_1.getId()).resolves(identityFromDAPI_1.toBuffer());
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            return [4 /*yield*/, clientWithMockTransport.platform.identities.register()];
                        case 1:
                            identity = _a.sent();
                            chai_1.expect(identity).to.be.not.null;
                            interceptedAssetLock = interceptedIdentityStateTransition.getAssetLock();
                            // Check intercepted st
                            chai_1.expect(interceptedAssetLock.getProof().getInstantLock()).to.be.deep.equal(isLock);
                            chai_1.expect(interceptedAssetLock.getTransaction().hash).to.be.equal(transaction.hash);
                            importedIdentityIds = account.getIdentityIds();
                            chai_1.expect(importedIdentityIds.length).to.be.equal(1);
                            chai_1.expect(importedIdentityIds[0]).to.be.equal(interceptedIdentityStateTransition.getIdentityId().toString());
                            return [2 /*return*/];
                    }
                });
            }); });
            return [2 /*return*/];
        });
    }); });
    describe('#platform.identities.topUp', function () { return __awaiter(_this, void 0, void 0, function () {
        var _this = this;
        return __generator(this, function (_a) {
            it('should top up an identity', function () { return __awaiter(_this, void 0, void 0, function () {
                var isLock, transaction, interceptedIdentityStateTransition, identity, interceptedAssetLock;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            transportMock.sendTransaction.callsFake(function (txString) {
                                transaction = new dashcore_lib_1.Transaction(txString);
                                isLock = createFakeIntantLock_1.createFakeInstantLock(transaction.hash);
                                txStreamMock.emit(TxStreamMock.EVENTS.data, new TxStreamDataResponseMock({ instantSendLockMessages: [isLock.toBuffer()] }));
                                // Emit the same transaction back to the client so it will know about the change transaction
                                txStreamMock.emit(TxStreamMock.EVENTS.data, new TxStreamDataResponseMock({ rawTransactions: [transaction.toBuffer()] }));
                            });
                            dapiClientMock.platform.broadcastStateTransition.callsFake(function (stBuffer) { return __awaiter(_this, void 0, void 0, function () {
                                var identityFromDAPI;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, clientWithMockTransport.platform.dpp.stateTransition.createFromBuffer(stBuffer)];
                                        case 1:
                                            interceptedIdentityStateTransition = _a.sent();
                                            if (interceptedIdentityStateTransition.getType() === stateTransitionTypes_1.default.IDENTITY_CREATE) {
                                                identityFromDAPI = new Identity_1.default({
                                                    protocolVersion: interceptedIdentityStateTransition.getProtocolVersion(),
                                                    id: interceptedIdentityStateTransition.getIdentityId().toBuffer(),
                                                    publicKeys: interceptedIdentityStateTransition.getPublicKeys().map(function (key) { return key.toObject(); }),
                                                    balance: interceptedIdentityStateTransition.getAssetLock().getOutput().satoshis,
                                                    revision: 0,
                                                });
                                                dapiClientMock.platform.getIdentity.withArgs(identityFromDAPI.getId()).resolves(identityFromDAPI.toBuffer());
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                            return [4 /*yield*/, clientWithMockTransport.platform.identities.register()];
                        case 1:
                            identity = _a.sent();
                            // Topping up the identity
                            return [4 /*yield*/, clientWithMockTransport.platform.identities.topUp(identity.getId(), 10000)];
                        case 2:
                            // Topping up the identity
                            _a.sent();
                            chai_1.expect(identity).to.be.not.null;
                            chai_1.expect(interceptedIdentityStateTransition.getType()).to.be.equal(stateTransitionTypes_1.default.IDENTITY_TOP_UP);
                            interceptedAssetLock = interceptedIdentityStateTransition.getAssetLock();
                            // Check intercepted st
                            chai_1.expect(interceptedAssetLock.getProof().getInstantLock()).to.be.deep.equal(isLock);
                            chai_1.expect(interceptedAssetLock.getTransaction().hash).to.be.equal(transaction.hash);
                            return [2 /*return*/];
                    }
                });
            }); });
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=Client.spec.js.map